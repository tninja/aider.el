
* How to integrate aider.el into development workflow

- Here I just share my personal experience. You might have different / better way to use aider.el.

** Feature development

To develop new features effectively with aider.el, follow these steps:

1. Start an Aider session specific to your current git repository by running the command “aider-run-aider”. This links your session to your project context.

2. Add relevant files to the session using commands such as “aider-add-current-file”, “aider-add-files-in-current-window”, etc, so that the AI has access to the complete codebase.

3. Use the in-place implementation commands—for example, “aider-implement-todo” to implement requirements directly in comments or “aider-function-or-region-refactor” to refactor existing code—since these approaches are preferred for feature development as they apply minimal, context-aware changes.
   - For inline one-line comment implementations:  
         For example, if you have the following Python code snippet:

         #+BEGIN_SRC python :eval never
         # TODO: Implement a function that checks if a number is prime
         #+END_SRC  

         Place the cursor on the TODO comment line and run “aider-implement-todo”. This command will send only that inline comment to Aider, which will then generate new code—for example, a complete implementation of an is_prime function—while leaving existing code unchanged. A possible generated output might be:

         #+BEGIN_SRC python :eval never
         def is_prime(n):
             if n <= 1:
                 return False
             for i in range(2, int(n ** 0.5) + 1):
                 if n % i == 0:
                     return False
             return True
         #+END_SRC  

         This revised example demonstrates using aider-implement-todo to generate entirely new code rather than modifying existing code.

     - If you are not satisfied with the change aider suggested. You can enter N to refuse accept that, and then use Ask Question (or /ask in aider session buffer) to ask aider modify the change given your more specific requirement. When you satisfy with that, use "Go Ahead" (or "go ahead" in aider session buffer)

   - For refactoring changes in existing code:
     When you need to adjust an existing function, class, or code block, do the following:
     1. If you wish to change only a part of the code, select that region; otherwise, simply place the cursor inside the target function or block.
     2. Run “aider-function-or-region-refactor”.
     3. When prompted, enter a clear refactoring instruction (for example, “Rename variable 'temp' to 'result'” or “Replace this loop with a list comprehension for efficiency”).
     4. Aider will process your instruction and return a revised version of the code with your changes applied in place while preserving the overall structure.
     5. Review the output and, if needed, refine your instructions further (e.g., by using “Ask Question”) to get the desired result.

4. Validate and evolve your feature with test-driven commands like “aider-write-unit-test” and “aider-fix-failing-test-under-cursor” as needed.

For more details, see the corresponding Feature development description in README.org.

** Bug fixes / exception investigation

** Code reading
