#+TITLE: aider.el : aider (AI Pair Programming) Inside Emacs 

* Introduction

- Do you like the AI features of the [[https://www.cursor.com/][Cursor AI Code Editor]] but prefer to stay within Emacs?

- [[https://github.com/paul-gauthier/aider][Aider]] is a well-known and highly effective AI pair programming tool for the terminal.

- The `aider.el` package offers an interactive interface to communicate with Aider in Emacs.
  - Most of the Elisp code in this repository was generated by Aider or `aider.el`.

* Why Use `aider.el` in Emacs?

- Pop-up Menu: No need to remember commands. (aider-transient-menu)

[[file:./transient_menu.png]]

- Following command integrated to aider menu

*** Aider session management:
  - (`aider-run-aider`): Create a comint-based, *git repo specific aider session* for interactive conversation.
    - Git repository identification is based on the file path of of the current file
    - Multiple Aider sessions can exist for different Git repositories
  - (`aider-switch-to-buffer`): Switch to the Aider buffer.

*** More ways to add files to the Aider buffer:
  - (`aider-add-current-file`): Add the current buffer file.
  - (`aider-current-file-read-only`): Add the current buffer file as read-only.
  - (`aider-add-files-in-current-window`): Add all buffers in the current window.
  - (`aider-add-same-type-files-under-dir`): Add all files with the same suffix as the current file under the current directory to Aider.
  - (`aider-batch-add-dired-marked-files`): Add multiple Dired marked files to the Aider buffer.

*** Refactor code:
  - (`aider-function-or-region-refactor`): If a region is selected, ask Aider to refactor the selected region. Otherwise, ask Aider to refactor the function under the cursor.

*** Explain code:
  - (`aider-function-or-region-explain`): If a region is selected, ask Aider to explain the selected region. Otherwise, ask Aider to explain the function under the cursor.
  - (`aider-explain-symbol-under-point`): Ask Aider to explain the symbol under cursor, given the line as context.

*** Support for Test Driven Development:
  - (`aider-fix-failing-test-under-cursor`): Place cursor on a failing test function and ask Aider to analyze and fix the code to make tests pass.

*** And More: Add your own Elisp functions to support your use case. You can certainly ask Aider / `aider.el` to do that.

* Installation

** Vanilla Emacs Installation
- [[https://aider.chat/docs/install.html][Install aider]]
- Install the dependency [[https://github.com/magit/transient][Transient]] using your package manager.
- Install aider.el with the following code:

#+BEGIN_SRC emacs-lisp
  (use-package aider
    :straight (:host github :repo "tninja/aider.el" :files ("aider.el"))
    :config
    ;; Use claude-3-5-sonnet cause it is best in aider benchmark 
    (setq aider-args '("--model" "anthropic/claude-3-5-sonnet-20241022"))
    (setenv "ANTHROPIC_API_KEY" anthropic-api-key)
    ;; Or use chatgpt model since it is most well known
    ;; (setq aider-args '("--model" "gpt-4o-mini"))
    ;; (setenv "OPENAI_API_KEY" <your-openai-api-key>)
    ;; Or use gemini v2 model since it is very good and free
    ;; (setq aider-args '("--model" "gemini/gemini-exp-1206"))
    ;; (setenv "GEMINI_API_KEY" <your-gemini-api-key>)
    ;; ;;
    Optional: Set a key binding for the transient menu
    (global-set-key (kbd "C-c a") 'aider-transient-menu))
#+END_SRC


** Doom Installation and Configuration

- Add the following code to your doom/packages.el

#+BEGIN_SRC emacs-lisp
(package! aider :recipe (:host github :repo "tninja/aider.el" :files ("aider.el" "aider-doom.el")))
#+END_SRC

- Adjust and add the following code to your doom/config.el

#+BEGIN_SRC emacs-lisp
(use-package aider
  :config
  (setq aider-args '("--model" "gpt-4o-mini")))
#+END_SRC

The aider prefix is "A".

- Start and open the aider buffer: =[SPC] A o=
- Add the current file with =[SPC] A a c=
- Reset the aider session with =[SPC] A r=
[[file:./doom-menus.png]]

** Optional

*** Helm Support

Helm enables fuzzy searching functionality for command history prompts

You can enable Helm-based completion in two ways:

- 1. Using use-package:

#+BEGIN_SRC emacs-lisp
  ;; Basic aider installation
  (use-package aider
    :straight (:host github :repo "tninja/aider.el" :files ("aider.el")))

  ;; Optional helm support
  (use-package aider-helm
    :straight (:host github :repo "tninja/aider.el" :files ("aider-helm.el"))
    :after (aider helm))
#+END_SRC

- 2. Manual loading:

#+BEGIN_SRC emacs-lisp
  ;; Load helm support after both aider and helm are loaded
  (with-eval-after-load 'helm
    (require 'aider-helm))
#+END_SRC
  
*** Aider script interactive mode: aider-minor-mode

- If you enjoy writing aider command in a separate file and send them to aider session, just like working on python or R script and send code block into REPL, you might want to try aider-minor-mode. It by default bind C-c C-n to send current line to aider session, and C-c C-c to send current region to aider session.
  - Enable aider-minor-mode for your editing buffer
  - To automatically enable aider-minor-mode to any file with aider inside filename

#+BEGIN_SRC emacs-lisp
  (add-hook 'find-file-hook
            (lambda ()
              (when (and (buffer-file-name)
                         (string-match-p "aider" (buffer-file-name)))
                (aider-minor-mode 1))))
#+END_SRC

* Screenshot

[[file:./screenshot.png]]

- In the above screenshot, aider was asked to generate an aider-help function and add the corresponding entry to the menu (top right window).
- aider received the command and generated the commit for it (bottom left).

* [[./examples][Example Application Written with aider.el]]

* Other Emacs AI coding tool

- Inspired by, and Thanks to:
  - [[https://github.com/shouya/ancilla.el][ancilla.el]]: AI Coding Assistant support code generation / code rewrite / discussion
  - [[https://github.com/xenodium/chatgpt-shell][chatgpt-shell]]: ChatGPT and DALL-E Emacs shells + Org Babel
  - [[https://github.com/copilot-emacs/copilot.el][copilot.el]]: Emacs plugin for GitHub Copilot
  - [[https://github.com/chep/copilot-chat.el][copilot-chat.el]]: Chat with GitHub Copilot in Emacs
    
