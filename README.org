[[file:./icon.png]]

#+TITLE: AI assisted programming in Emacs with Aider 

[[https://melpa.org/#/aider][https://melpa.org/packages/aider-badge.svg]]
[[https://stable.melpa.org/#/aider][https://stable.melpa.org/packages/aider-badge.svg]]
[[https://github.com/tninja/aider.el/graphs/contributors][https://img.shields.io/github/contributors/tninja/aider.el.svg]]

[[file:README.zh-cn.org][中文版]]

* Table of Contents

- [[#introduction][Introduction]]
- [[#installation][Installation]]
- [[#frequently-used-features][Most used features (integrated into the aider menu)]]
- [[#faq][FAQ]]
- [[#future-work][Future work]]
- [[#other-emacs-ai-coding-tool][Other Emacs AI coding tool]]

* Introduction

- Do you enjoy the AI features of the [[https://www.cursor.com/][Cursor AI Code Editor]] but prefer working within Emacs?

- [[https://github.com/paul-gauthier/aider][Aider]] is a well-known and highly effective AI pair programming tool for the terminal.

- The aider.el package initially offers an simple UI to communicate with Aider in Emacs. It aim to minimize the user's effort using aider in emacs.
  - Most of the Elisp code in this repository was generated by Aider or aider.el.
  - aider.el aim to be a stable productivity tool we can use daily. I will carefully test the Features / Functions in this library before code merging.

- After more than eight months of development, aider.el is more than a simple aider UI now. Comparing to its forked peer (aidermacs), Aider.el has brought in lots of application-level features and tools to enhance daily programming. These include:
  - AI-assisted agile development methodologies (like [[./aider-agile.el][TDD, refactoring]] and [[./aider-legacy-code.el][legacy code handling]] based on established software engineering books)
  - [[./aider-git.el][Diff extraction and AI code review tools]]
  - [[./aider-code-read.el][Advanced code / module reading assistant]]
  - [[./aider-software-planning.el][Project software planning discussion capabilities]]
  - Let aider to fix the errors reported by flycheck
  - [[./aider-git.el][Code / repo evolution analysis]] with git blame and git log
  - [[./aider-bootstrap.el][Utilities for bootstrapping new files and projects]].
  - Organize project with repo specific [[./aider-prompt-mode.el][Aider prompt file]]
  - [[./snippets][Snippets]] from community and aider use pattern / workflow

- Besides of that, aider.el focus on simplicity. It has much less configurations (transparent to aider config), simplified menu.

- Aider.el is under active development. [[./HISTORY.org][Recent change history]],  [[./appendix.org#recent-new-features][Recent new features]]


[[file:./transient_menu.png]]

* Installation

- Emacs need to be >= 26.1

** Melpa + package-install (recommended)
- [[https://aider.chat/docs/install.html][Install aider]]
- Install the emacs dependency library [[https://github.com/magit/transient][Transient]] (version >= 0.9.0), [[https://github.com/magit/magit][Magit]], and [[https://jblevins.org/projects/markdown-mode/][Markdown-mode]] using your package manager.
- Install aider.el with the following instruction:

Enable installation of packages from MELPA by adding an entry to package-archives after (require 'package) and before the call to package-initialize in your init.el or .emacs file: 

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
;; and `package-pinned-packages`. Most users will not need or want to do this.
;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)
#+END_SRC

- Use M-x package-refresh-contents or M-x package-list-packages to ensure that Emacs has fetched the MELPA package list 
- Use M-x package-install to install [[https://melpa.org/#/aider][aider]] package
- Import and configure aider.el in your init.el or .emacs file:

#+BEGIN_SRC emacs-lisp
  (use-package aider
    :config
    ;; For latest claude sonnet model
    (setq aider-args '("--model" "sonnet" "--no-auto-accept-architect"))
    (setenv "ANTHROPIC_API_KEY" anthropic-api-key)
    ;; Or gemini model
    ;; (setq aider-args '("--model" "gemini"))
    ;; (setenv "GEMINI_API_KEY" <your-gemini-api-key>)
    ;; Or chatgpt model
    ;; (setq aider-args '("--model" "o4-mini"))
    ;; (setenv "OPENAI_API_KEY" <your-openai-api-key>)
    ;; Or use your personal config file
    ;; (setq aider-args `("--config" ,(expand-file-name "~/.aider.conf.yml")))
    ;; ;;
    ;; Optional: Set a key binding for the transient menu
    (global-set-key (kbd "C-c a") 'aider-transient-menu) ;; for wider screen
    ;; or use aider-transient-menu-2cols / aider-transient-menu-1col, for narrow screen
    (aider-magit-setup-transients)) ;; add aider magit function to magit menu
#+END_SRC

- *aider-args just passed directly to aider CLI*, [[https://aider.chat/docs/config/options.html][aider options reference]]
  - to avoid introducing unnecessary complexity and learning cost, configuration in aider.el side is minimized.
- if aider-args is empty (default), it will use ~/.aider.conf.yml file. In this way, aider CLI and aider.el share same configuration

- The example models: sonnet, gemini, o4-mini, they charge money, and you need to ask for api key add fund to your api account firstly

** Helm Support

Helm enables fuzzy searching functionality for command history prompts. Since it is very possible that we use prompt written before, it could potentially save lots of time typing. *This plugin is recommended if you use helm*.

If you used installed aider.el through melpa and package-install, just need to ~(require 'aider-helm)~

** [[./appendix.org#other-ways-to-install-aiderel][Other ways to install aider.el]]

* Frequently used features

*** Aider session management
  - aider-run-aider :: Creates a comint-based, *git repo-specific Aider session* for interactive conversation.
    - Git repository identification is based on the current file's path
    - Multiple Aider sessions can run simultaneously for different Git repositories
    - When being called with the universal argument (~C-u~), a prompt will offer the user to change the content of ~aider-args~ for this session.
    - When run it in a dired, eshell, or shell buffer, it will ask you if you want to add [[https://aider.chat/docs/config/options.html#--subtree-only][--subtree-only flag]], which only consider files in that directory, to make it faster
  - aider-switch-to-buffer :: Switch to the Aider buffer.
    - use ~^~ in the menu to toggle open aider session in other window inside current frame, or open a dedicate frame for aider session. This is useful when there is more than one monitor, and one frame / monitor is used to hold multi buffers for code, and another frame / monitor hold aider session.

*** More ways to add files to the Aider buffer
  - aider-add-current-file-or-dired-marked-files :: Add the current buffer file. If it is used in dired buffer, add all dired marked files.
    - ~C-u~ prefix to add files read-only.
  - aider-add-files-in-current-window :: Add all buffers in the current window.

*** Write code
  - aider-function-or-region-refactor :: If a region is selected, ask Aider to refactor the selected region. Otherwise, ask Aider to change / refactor the function under the cursor.
    - A couple common used prompts provided when you are using aider-helm.el
  - aider-implement-todo :: Implement requirement in comments in-place, in current context.
    - If cursor is on a comment line, implement that specific comment in-place.
    - If there is a selection region of multi-line comments, implement code for those comments in-place.
    - If cursor is inside a function, implement TODOs for that function, otherwise implement TODOs for the entire current file.
      - The keyword (TODO by default) can be customized with the variable ~aider-todo-keyword-pair~. One example is to use AI! comment, which is as same as aider AI comment feature.

*** Support for Agile Development
  - aider-write-unit-test :: If the current buffer is main source code file, generate comprehensive unit tests for the current function or file. If the cursor is in a test source code file, when the cursor is on a test function, implement the test function. Otherwise, provide description to implement the test function (or spec).
  - If main source code break and test function fails, use ~aider-function-or-region-refactor~ on the failed test function to ask Aider to fix the code to make the test pass.
  - aider-refactor-book-method :: for code refactoring using techniques from [[https://www.amazon.com/Refactoring-Improving-Existing-Addison-Wesley-Signature/dp/0134757599/ref=asc_df_0134757599?mcid=2eb8b1a5039a3b7c889ee081fc2132e0&hvocijid=16400341203663661896-0134757599-&hvexpln=73&tag=hyprod-20&linkCode=df0&hvadid=721245378154&hvpos=&hvnetw=g&hvrand=16400341203663661896&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=9032161&hvtargid=pla-2281435180458&psc=1][Martin Flower's Refactoring book]], you can also let AI make the decision on how to refactor, example: [[https://github.com/tninja/aider.el/pull/146/commits/811a8eca47dfba3c52a33afba7bb11a8a69689b1][this commit]] addressing [[https://github.com/tninja/aider.el/pull/146#discussion_r2078182430][this comment]]
  - aider-pull-or-review-diff-file :: let aider to pull and review the code change.

*** Questions on code
  - aider-ask-question :: Ask Aider a question about the code in the current context. If a region is selected, use the region as context.
    - You can ask any question on the code. Eg. Explain the function, review the code and find the bug, etc
    - A couple common used prompts provided when you are using aider-helm.el
  - aider-go-ahead :: When you are asking aider to suggest a change using above command, maybe even after several round of discussion, when you are satisfied with the solution, you can use this command to ask Aider to go ahead and implement the change.
  - aider-code-read :: Choose the method from the book, [[https://www.amazon.com/Code-Reading-Open-Source-Perspective/dp/0201799405/ref=sr_1_1?crid=39HOB4975Y8LZ&dib=eyJ2IjoiMSJ9.fjkryt7JHaLWMQ5xuSPTED-gJR52Wqh448RQ3TrsTPYAFNpx--gA-mTNGqRQqebb.rnvw74YGEJXCRRe0UIwUSwAaeEngg0MpraxcTOBRn5Q&dib_tag=se&keywords=Code+Reading%3A+The+Open+Source+Perspective&qid=1744517167&s=books&sprefix=code+reading+the+open+source+perspective%2Cstripbooks%2C254&sr=1-1][Code Reading: The Open Source Perspective, by Diomidis Spinellis]], to analyze the region / function / file / module. 
  - aider-start-software-planning :: Start an interactive software planning discussion session with Aider, through a question-based sequential thinking process.

*** Inside comint buffer

- / key to trigger aider command completion
- file path completion will be triggered automatically after certain command
- use TAB key to enter prompt from mini-buffer, or helm with completion

*** Aider prompt file - Good place to write and organize prompt

- Syntax highlight, aider command completion, file path completion supported

- Use ~C-c a p~ to open the repo specific prompt file. You can use this file to organize tasks, and write prompt and send them to the Aider session. multi-line prompts are supported.

- People happy with sending code from editor buffer to comint buffer (eg. ESS, python-mode, scala-mode) might like this. This is a interactive and reproducible way

- ~C-c C-n~ key can be used to send the current prompt line to the comint buffer. Or batch send selected region line by line (~C-u C-c C-n~). To my experience, this is the most used method in aider prompt file.

- ~C-c C-c~ key is for multi-line prompt. The following example shows ~C-c C-c~ key pressed when cursor is on the prompt.

[[file:./aider_prompt_file.png]]

- start aider session in a sub-tree inside aider prompt file:
  - Use ~subtree-only <dir>~ to start aider session in a sub-tree, where <dir> is the directory to start the session.
  - This is useful when you want to work on a sub-directory of a large mono repo, and don't want to wait for aider to scan the entire repo.

*** [[./appendix.org#prompt-snippets][Prompt Snippets]]

* [[./appendix.org#cons-of-aiderel][Cons of aider.el]]

* [[./appendix.org#be-careful-about-ai-generated-code][Be careful about AI generated code]]

* FAQ

- transient-define-group undefined error:
  - Please install latest stable transient package (version >= 0.9.0), so that it have [[https://github.com/magit/transient/blob/main/CHANGELOG#v090----unreleased][transient-define-group macro]]

- How to review / accept the code change? 
  - Comparing to cursor, aider have a different way to do that. [[https://github.com/tninja/aider.el/issues/98][Discussion]]
  - Note: *Aider v0.77.0 automatically accept changes for /architect command. If you want to review the code change before accepting it like before for many commands in aider.el, you can disable that flag with "--no-auto-accept-architect" in either aider-args or .aider.conf.yml*.

- How to disable to aider auto-commit?    
  - add --no-auto-commits to aider-args or ~/.aider.conf.yml. aider-args is passed to aider CLI directly. [[https://aider.chat/docs/config/options.html][aider options reference]]

- What kind of model aider support? Can aider support local model?
  - Yes. Aider support it through [[https://github.com/BerriAI/litellm][LiteLLM]]. Please refer [[https://aider.chat/docs/llms/other.html][aider document]].

- How to add file to aider session using menu?
  - single file, in that file buffer, C-c a f
  - two or three files, open all of them in current window as different buffer, C-c a w
  - a few files, in same directory, or have same regex pattern: mark them in dired buffer (or find-grep-dired result with regex), C-c a f.
  - whole project / module, certain types of suffix file (eg. *.py, *.java), C-c a M

- In large mono repo, aider take long time to scan the repo. How to improve?
  - Aider use .aiderignore file to handle this, [[https://aider.chat/docs/faq.html#can-i-use-aider-in-a-large-mono-repo][detail]], or, you can turn off git with --no-git in aider-args.
  - Or, use the --subtree-only with following way in emacs:
    - Used dired, eshell, or shell buffer to go to the directory (subtree) to be included
    - C-c a a to trigger aider-run-aider
    - Answer yes about --subtree-only question, it will add the flag
  - Or, in aider prompt file, use ~subtree-only <dir>~ to specify where to start, and use C-c C-n to start aider session at that directory, it start with --subtree-only 
   
- How to let aider work with your speaking language?
  - use [[https://aider.chat/docs/usage/conventions.html#specifying-coding-conventions][aider coding conventions]]. In my case, I added "- reply in Chinese" to the CONVENTIONS.md file, and load work through [[https://aider.chat/docs/config/aider_conf.html][.aider.conf.yml]]. Or, put sth like following into aider-args variable. 
    - "--read" (expand-file-name "~/.emacs.d/.emacs/aider/CONVENTIONS.md")

- How to enter multi-line prompts in aider session buffer?
  - aider itself support that, [[https://aider.chat/docs/usage/commands.html#entering-multi-line-chat-messages][doc]].
  - C-c RET: https://github.com/MatthewZMD/aidermacs/issues/139
  - use aider prompt file (~aider-open-prompt-file~, ~C-c a p~) to write multi-line prompts

- Can aider.el work with tramp? (aider running on remote machine)
  - artyom-smushkov make aider-add-current-file support tramp file: https://github.com/tninja/aider.el/issues/36
  - mgcyung said it can work in this way: https://github.com/tninja/aider.el/issues/85

- My screen is narrow, the transient menu is too wide, how to make it more readable? (https://github.com/tninja/aider.el/issues/157)
  - Use ~aider-transient-menu-1col~ or ~aider-transient-menu-2cols~ to use 1 column or 2 columns transient menu.

- How to customize the aider-comint-mode prompt and input color?
  - Spike-Leung said [[https://github.com/tninja/aider.el/issues/117#issuecomment-2764420079][add hook to it will help]]

- Why aider-code-change got disabled in transient menu?
  - It bypass code review and is not recommended. The code quality is not as good as /architect. Discussed here: https://github.com/tninja/aider.el/issues/128

* TODO Future work

** Feature

- More context sensitive code change / code reading commands [2/3]
  - [X] Current aider-ask-question need to be improved, since there could be so many different question to ask
  - [X] How to port the candidate list feature to aider-plain-read-string
  - [ ] Thinking on how to improve the candidate list for the function
- More thinking on improving code quality tool such as unit-test [5/5]
  - [X] Code refactoring functions
  - [X] TDD functions
  - [X] Code reading functions 
  - [X] Legacy code support
- [X] Bootstrap code or document from scratch
- [ ] Import useful MCP feature to aider
- [ ] Learn and migrate useful feature from popular AI coding tool
- [ ] Better way to batch add relevant files from repo to aider session
- [ ] Consider use existing code tool's output as part of context [/]
  - [ ] flycheck
  - [ ] compile output
- [ ] Thinking on how to simplify the menu / commands

** Code quality
 
- Better unit-test / integration test of this package. Hopefully it is automated.

* AI Assisted Programming related books

The following books introduce how to use AI to assist programming and potentially be helpful to aider / aider.el users.

- [[https://learning.oreilly.com/library/view/ai-assisted-programming/9781098164553/][AI-Assisted Programming]] , by Tom Taulli, April, 2024
- [[https://learning.oreilly.com/library/view/coding-with-ai/9781394249138/][Coding with AI For Dummies]], by Chris Minnick, March 2024
- [[https://www.amazon.com/Learn-AI-Assisted-Python-Programming-Second/dp/1633435997/ref=sr_1_19?crid=2MDJBJSIIFHHB&dib=eyJ2IjoiMSJ9.r49jgbX_SxOsAZOy3KnPP9rvtd9VmO1Jjn2Gcon-UgRSwLnzEtcArbaYhW-0h3PyxiJt_4RpfEqhGuiHyh8H-r11rZXxGPxnlIZh0eEaxrvpfKmKJO-mVPk2NRiNp_HRvy8BQqRSeqxMAmuCtGEfu-XofuacCNaxrTDIgNNL23MCTymRqIYQKCJlgW6MUvE00RLnIUYy3j-MSUILOhRpj3HLIJnN0jTyWI8MXfJ3oZGvw4orwskyYZR7kb1_fDX7LLF622PXZmiWn-wFEergew7_6G5D31icv4uNlcIC1Ts.Vf51k-Ag1zVOkmkjkDiVWjpoky698yTcppUBllLxjs4&dib_tag=se&keywords=AI+programming&qid=1748737750&sprefix=ai+programming%2Caps%2C352&sr=8-19][Learn AI-Assisted Python Programming, Second Edition: With GitHub Copilot and ChatGPT]], by Leo Porter etc, Oct 29, 2024
- [[https://learning.oreilly.com/library/view/ai-powered-developer/9781633437616/][AI-Powered Developer]], by Nathan Crocker, September 2024
- [[https://www.amazon.com/Software-Testing-Generative-Mark-Winteringham/dp/1633437361/ref=sr_1_34?crid=2MDJBJSIIFHHB&dib=eyJ2IjoiMSJ9.r49jgbX_SxOsAZOy3KnPP9rvtd9VmO1Jjn2Gcon-UgRSwLnzEtcArbaYhW-0h3PyxiJt_4RpfEqhGuiHyh8H-r11rZXxGPxnlIZh0eEaxrvpfKmKJO-mVPk2NRiNp_HRvy8BQqRSeqxMAmuCtGEfu-XofuacCNaxrTDIgNNL23MCTymRqIYQKCJlgW6MUvE00RLnIUYy3j-MSUILOhRpj3HLIJnN0jTyWI8MXfJ3oZGvw4orwskyYZR7kb1_fDX7LLF622PXZmiWn-wFEergew7_6G5D31icv4uNlcIC1Ts.Vf51k-Ag1zVOkmkjkDiVWjpoky698yTcppUBllLxjs4&dib_tag=se&keywords=AI+programming&qid=1748737750&sprefix=ai+programming%2Caps%2C352&sr=8-34][Software Testing with Generative AI]], by Mark Winteringham, Dec 2024
- [[https://learning.oreilly.com/library/view/-/9781098162269/][Generative AI for Software Development]], by Sergio Pereira, will be published in August, 2025
- [[https://itrevolution.com/product/vibe-coding-book/][Vibe Coding]], Coming Fall 2025
- [[https://learning.oreilly.com/library/view/beyond-vibe-coding/9798341634749/][Beyond Vibe Coding]], by Addy Osmani, will be published in August, 2025

* Other Emacs AI coding tool

- Inspired by, and Thanks to:
  - [[https://github.com/shouya/ancilla.el][ancilla.el]]: AI Coding Assistant support code generation / code rewrite / discussion
  - [[https://github.com/xenodium/chatgpt-shell][chatgpt-shell]]: ChatGPT and DALL-E Emacs shells + Org Babel, comint session based idea
  - [[https://github.com/copilot-emacs/copilot.el][copilot.el]]: Emacs plugin for GitHub Copilot
  - [[https://github.com/chep/copilot-chat.el][copilot-chat.el]]: Chat with GitHub Copilot in Emacs
  - [[https://github.com/karthink/gptel][gptel]]: Most stared / widely used LLM client in Emacs

- Package depends on this
  - [[https://github.com/localredhead/ob-aider.el][ob-aider.el]]: Org Babel functions for Aider.el integration

- Other tools
  - [[https://github.com/stevemolitor/claude-code.el][claude-code.el]]

* Contributing

- Contributions are welcome! Please feel free to submit a Pull Request.
